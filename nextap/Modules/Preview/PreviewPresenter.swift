//
//  PreviewPresenter.swift
//  nextap
//
//  Created by Tom치코 캛ern칳 on 14/09/2020.
//  Copyright (c) 2020 Tom치코 캛ern칳. All rights reserved.
//
//  This file was generated by the 游냀 VIPER generator
//

import Foundation

final class PreviewPresenter {

    // MARK: - Private properties -

    private unowned let view: PreviewViewInterface
    private let interactor: PreviewInteractorInterface
    private let wireframe: PreviewWireframeInterface
    
    private var indexPath: IndexPath
    private let stories: [Story]
    
    var delegate: PreviewDelegate?

    // MARK: - Lifecycle -

    init(view: PreviewViewInterface, interactor: PreviewInteractorInterface, wireframe: PreviewWireframeInterface, indexPath: IndexPath, stories: [Story]) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        
        self.indexPath = indexPath
        self.stories = stories
    }
}

// MARK: - Extensions -

extension PreviewPresenter: PreviewPresenterInterface {
    
    func previewIndexChanged(to newIndex: Int) {
        self.indexPath = IndexPath(row: newIndex, section: 0)
        //delegate?.setActiveIndexPath(indexPath: self.indexPath)
    }
    
    func getItem(at: Int) -> Story {
        return stories[at]
    }
    
    func dismissButtonTouched() {
        delegate?.setActiveIndexPath(indexPath: self.indexPath)
        wireframe.dismissButtonTouched()
    }
    
    func viewDidLoad() {
        
        for story in self.stories {
            let storyView = StoryView.instanceFromNib(presenter: self)
            storyView.configureWithStory(story: story)
            
            self.view.addStoryView(view: storyView)
        }
    }
    
    func viewDidLayoutSubviews() {
        self.view.scrollToImage(at: self.indexPath)
    }
    
}
